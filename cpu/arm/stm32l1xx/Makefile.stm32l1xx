# Adapted from Makefile.msp430

### Code common for all ARM CPUs

CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm/
CONTIKI_CPU_ARM_COMMON=$(CONTIKI_CPU_ARM)/common

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/stm32l1xx


### Define the source files we have in the STM32L1XX port

CONTIKI_CPU_DIRS = . ../common/dbg-io ../common/usb loader

STM32L1XX = startup_stm32l1xx.S misc.c stm32l1xx_comp.c stm32l1xx_dma.c stm32l1xx_fsmc.c stm32l1xx_lcd.c stm32l1xx_rtc.c stm32l1xx_tim.c \
            stm32l1xx_adc.c stm32l1xx_crc.c stm32l1xx_exti.c stm32l1xx_gpio.c stm32l1xx_opamp.c stm32l1xx_sdio.c \
            stm32l1xx_usart.c stm32l1xx_aes.c stm32l1xx_dac.c stm32l1xx_flash.c stm32l1xx_i2c.c stm32l1xx_pwr.c \
            stm32l1xx_spi.c stm32l1xx_wwdg.c stm32l1xx_aes_util.c stm32l1xx_dbgmcu.c stm32l1xx_flash_ramfunc.c \
            stm32l1xx_iwdg.c stm32l1xx_rcc.c stm32l1xx_syscfg.c system_stm32l1xx.c clock.c watchdog.c debug-uart.c


TARGETLIBS = random.c dbg-printf.c dbg-putchar.c dbg-sprintf.c dbg-snprintf.c strformat.c dbg-puts.c

CONTIKI_TARGET_SOURCEFILES += $(STM32L1XX) $(SYSAPPS) $(ELFLOADER) \
			$(TARGETLIBS) $(UIPDRIVERS) $(USB)

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)


CONTIKI_PLATFORM_DIRS = $(PLATFORM_APPDIRS) \
	 $(addprefix -I,$(CONTIKI)/platform/$(TARGET)/, $(CONTIKI_TARGET_DIRS))


THREADS =

### Compiler definitions
CC       = arm-none-eabi-gcc
LD       = arm-none-eabi-ld
AS       = arm-none-eabi-as
AR       = arm-none-eabi-ar
NM       = arm-none-eabi-nm
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip


TOOLCHAIN_DIR := $(shell dirname `which $(CC)`)/../$(PREFIX)

XSLTPROC=xsltproc

PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

LINKERSCRIPT = $(CONTIKI_CPU)/STM32_flash.ld

STARTUP = startup_stm32l1xx.o

# JTAG program upload
OPENOCD	 = openocd
OPENOCD_DIR = $(CONTIKI_CPU_ARM)/openocd/
OPENOCD_CFG = arm7_wig.cfg

# Use OpenOCD by default
PROG=openocd

MCU  = cortex-m3
MCFLAGS += -mcpu=$(MCU)

ARCH_FLAGS= $(MCFLAGS) -mthumb -Os -msoft-float -Wall \
            -fno-common -ffunction-sections -fdata-sections

CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) \
     -I$(CONTIKI_CPU)/dbg-io \
     -I$(CONTIKI_PLATFORM_DIRS) \
      ${addprefix -I,$(APPDIRS)} \
      -DMCK=$(MCK) \
      $(ARCH_FLAGS)

CFLAGS  += $(CFLAGSNO) -I$(TOOLCHAIN_DIR)/include $(ARCH_FLAGS) -MD -DSTM32L1XX

ifeq ($(USE_CPLUS_PLUS_COMPILATION),1)
CXXFLAGS = -fno-rtti -fno-exceptions -Wall
endif


LDFLAGS += -L $(CONTIKI_CPU) -T $(LINKERSCRIPT) \
	--static -L$(TOOLCHAIN_DIR)/lib \
	-Wl,--gc-sections $(MCFLAGS) -mthumb

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__



### Setup directory search path for source files

CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_O=yes


%.o: %.c
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@


CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
%.o: %.S
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.S
	$(CC) $(CFLAGS) $< -c  -o $@


CUSTOM_RULE_C_TO_CO=yes

%.co: %.c
	$(CC) $(CFLAGS) $< -c -o $@

CUSTOM_RULE_C_TO_CE=yes

%.ce: %.o
	$(LD) $(LDFLAGS) --relocatable -T $(CONTIKI_CPU)/merge-rodata.ld $< -o $@
	$(STRIP) -K _init -K _fini --strip-unneeded -x $@

CUSTOM_RULE_LINK=yes

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<


%-nosyms.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) # $(OBJECTDIR)/empty-symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)
	$(OBJCOPY) -O ihex $@ $(CONTIKI_PROJECT).hex
	$(OBJCOPY) -O binary $@ $(CONTIKI_PROJECT).bin

#I don't know why the makefile not excute these lines
# %.hex: %.$(TARGET)
# 	$(OBJCOPY) $^ -O ihex $@

# %.bin: %.$(TARGET)
# 	$(OBJCOPY) -O binary $< $@

.PHONY: symbols.c
ifdef CORE
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) $(OBJECTDIR)/symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)

symbols.c: $(CORE)
	$(NM) $< | awk -f $(CONTIKI_CPU)/builtins.awk -f ../../tools/mknmlist > symbols.c

else
%.$(TARGET): %-nosyms.$(TARGET)
	ln -sf $< $@
endif

empty-symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h



ifeq ($(PROG),openocd)
%.u: %.bin
	# Clear lock bits
	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) -c init -c "reset halt;sleep 250;flash probe 0;stm32x mass_erase 0; sleep 500;flash write_bank 0 $< 0;reset halt;resume;sleep 500;exit"
else ifeq ($(PROG),samiam)
%.u: %.ihex
	# Clear lock bits
	$(SAMIAM) "open $(SAMIAM_TTY) , writew 0xffffff64 5a000004"
	$(SAMIAM) "open $(SAMIAM_TTY) , writew 0xffffff64 5a002004"
	$(SAMIAM) "open $(SAMIAM_TTY) , flash $< , go"

endif

ocd_reset:
	$(OPENOCD) -s $(OPENOCD_DIR) -f $(OPENOCD_CFG) -c init -c "reset halt;resume" -c exit

# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
$(OBJECTDIR)/elfloader.o:
	echo -n >$@

clean: clean_cpu

clean_cpu:
	-rm -rf $(BUILTSRCDIR)

.PRECIOUS: %-nosyms.$(TARGET)
